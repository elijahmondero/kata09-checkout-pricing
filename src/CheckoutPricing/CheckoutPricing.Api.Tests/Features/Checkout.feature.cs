// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CheckoutPricing.Api.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CheckoutFeature : object, Xunit.IClassFixture<CheckoutFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Checkout.feature"
#line hidden
        
        public CheckoutFeature(CheckoutFeature.FixtureData fixtureData, CheckoutPricing_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Checkout", "  To calculate the total price of items in the shopping cart\r\n  [Calculator](Chec" +
                    "koutPricing.Api.Tests/Features/Checkout.feature)\r\n  **[Checkout Feature](http://" +
                    "codekata.com/kata/kata09-back-to-the-checkout/)**", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate total price without special offers")]
        [Xunit.TraitAttribute("FeatureTitle", "Checkout")]
        [Xunit.TraitAttribute("Description", "Calculate total price without special offers")]
        public virtual void CalculateTotalPriceWithoutSpecialOffers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate total price without special offers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item",
                            "UnitPrice"});
                table1.AddRow(new string[] {
                            "A",
                            "50"});
                table1.AddRow(new string[] {
                            "B",
                            "30"});
                table1.AddRow(new string[] {
                            "C",
                            "20"});
                table1.AddRow(new string[] {
                            "D",
                            "15"});
#line 7
    testRunner.Given("the following pricing rules:", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item"});
                table2.AddRow(new string[] {
                            "A"});
                table2.AddRow(new string[] {
                            "B"});
                table2.AddRow(new string[] {
                            "C"});
#line 13
    testRunner.When("I scan the following items:", ((string)(null)), table2, "When ");
#line hidden
#line 18
    testRunner.Then("the total price should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate total price with special offers")]
        [Xunit.TraitAttribute("FeatureTitle", "Checkout")]
        [Xunit.TraitAttribute("Description", "Calculate total price with special offers")]
        public virtual void CalculateTotalPriceWithSpecialOffers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate total price with special offers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item",
                            "UnitPrice",
                            "SpecialQuantity",
                            "SpecialPrice"});
                table3.AddRow(new string[] {
                            "A",
                            "50",
                            "3",
                            "130"});
                table3.AddRow(new string[] {
                            "B",
                            "30",
                            "2",
                            "45"});
                table3.AddRow(new string[] {
                            "C",
                            "20",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "D",
                            "15",
                            "",
                            ""});
#line 21
    testRunner.Given("the following pricing rules:", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item"});
                table4.AddRow(new string[] {
                            "A"});
                table4.AddRow(new string[] {
                            "A"});
                table4.AddRow(new string[] {
                            "A"});
                table4.AddRow(new string[] {
                            "B"});
                table4.AddRow(new string[] {
                            "B"});
#line 27
    testRunner.When("I scan the following items:", ((string)(null)), table4, "When ");
#line hidden
#line 34
    testRunner.Then("the total price should be 175", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate total price with a mix of special and regular prices")]
        [Xunit.TraitAttribute("FeatureTitle", "Checkout")]
        [Xunit.TraitAttribute("Description", "Calculate total price with a mix of special and regular prices")]
        public virtual void CalculateTotalPriceWithAMixOfSpecialAndRegularPrices()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate total price with a mix of special and regular prices", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 36
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item",
                            "UnitPrice",
                            "SpecialQuantity",
                            "SpecialPrice"});
                table5.AddRow(new string[] {
                            "A",
                            "50",
                            "3",
                            "130"});
                table5.AddRow(new string[] {
                            "B",
                            "30",
                            "2",
                            "45"});
                table5.AddRow(new string[] {
                            "C",
                            "20",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "D",
                            "15",
                            "",
                            ""});
#line 37
    testRunner.Given("the following pricing rules:", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item"});
                table6.AddRow(new string[] {
                            "A"});
                table6.AddRow(new string[] {
                            "A"});
                table6.AddRow(new string[] {
                            "A"});
                table6.AddRow(new string[] {
                            "A"});
                table6.AddRow(new string[] {
                            "B"});
                table6.AddRow(new string[] {
                            "B"});
                table6.AddRow(new string[] {
                            "C"});
#line 43
    testRunner.When("I scan the following items:", ((string)(null)), table6, "When ");
#line hidden
#line 52
    testRunner.Then("the total price should be 245", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Incremental scanning of items")]
        [Xunit.TraitAttribute("FeatureTitle", "Checkout")]
        [Xunit.TraitAttribute("Description", "Incremental scanning of items")]
        public virtual void IncrementalScanningOfItems()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incremental scanning of items", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item",
                            "UnitPrice",
                            "SpecialQuantity",
                            "SpecialPrice"});
                table7.AddRow(new string[] {
                            "A",
                            "50",
                            "3",
                            "130"});
                table7.AddRow(new string[] {
                            "B",
                            "30",
                            "2",
                            "45"});
                table7.AddRow(new string[] {
                            "C",
                            "20",
                            "",
                            ""});
                table7.AddRow(new string[] {
                            "D",
                            "15",
                            "",
                            ""});
#line 55
    testRunner.Given("the following pricing rules:", ((string)(null)), table7, "Given ");
#line hidden
#line 61
    testRunner.When("I scan the item \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
    testRunner.Then("the total price should be 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
    testRunner.When("I scan the item \"B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
    testRunner.Then("the total price should be 80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
    testRunner.When("I scan the item \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
    testRunner.Then("the total price should be 130", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
    testRunner.When("I scan the item \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
    testRunner.Then("the total price should be 160", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.When("I scan the item \"B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
    testRunner.Then("the total price should be 175", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.When("I scan the item \"C\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.Then("the total price should be 195", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CheckoutFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CheckoutFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
